#version 330 core

in vec3 aPos;
in vec3 aNormal;
in vec2 aTexCoord;

out vec4 fragColor;
 
uniform vec3 viewPos;
uniform sampler2D first_texture;
uniform sampler2D second_texture;

struct Light {
  vec3 position;
  vec3 ambient;
  vec3 diffuse;
  vec3 specular;
  vec3 direction;

  float cutOff;
  float outerCutOff;

  float constant;
  float linear;
  float quadratic;
};

uniform Light light1;
uniform Light light2;
uniform Light light3;
uniform Light light4;

struct Material {
  vec3 ambient;
  vec3 diffuse;
  vec3 specular;
  float shininess;
}; 
  
uniform Material material;

void main() {
      vec3 norm = normalize(aNormal);
      vec3 lightDir1 = normalize(light1.position - aPos);
      vec3 lightDir2 = normalize(light2.position - aPos);
      vec3 lightDir3 = normalize(light3.position - aPos);
      vec3 lightDir4 = normalize(light4.position - aPos);
      float theta3 = dot(lightDir3, normalize(-light3.direction));
      float theta4 = dot(lightDir4, normalize(-light4.direction));

      float distance3 = length(light3.position - aPos);
      float distance4 = length(light4.position - aPos);
      float attenuation3 = 1.0f / (light3.constant + light3.linear * distance3 + light3.quadratic * (distance3 * distance3));
      float attenuation4 = 1.0f / (light4.constant + light4.linear * distance4 + light4.quadratic * (distance4 * distance4));
      float intensity3 = clamp(theta3, 0.0, 1.0);
      float intensity4 = clamp(theta4, 0.0, 1.0);

      // ambient
      vec3 ambientParallel = (light1.ambient + light2.ambient) * material.ambient * texture(first_texture, aTexCoord).rgb;
      vec3 ambientSpot3 = light3.ambient * material.ambient * texture(first_texture, aTexCoord).rgb * (attenuation3 * intensity3);
      vec3 ambientSpot4 = light4.ambient * material.ambient * texture(first_texture, aTexCoord).rgb * (attenuation4 * intensity4);

      // diffuse
      float diff1 = max(dot(norm, lightDir1), 0.0);
      float diff2 = max(dot(norm, lightDir2), 0.0);
      float diff3 = max(dot(norm, lightDir3), 0.0);
      float diff4 = max(dot(norm, lightDir4), 0.0);

      vec3 diffuse1 = light1.diffuse * (diff1 * material.diffuse) * texture(first_texture, aTexCoord).rgb;
      vec3 diffuse2 = light2.diffuse * (diff2 * material.diffuse) * texture(first_texture, aTexCoord).rgb;
      vec3 diffuse3 = light3.diffuse * (diff3 * material.diffuse) * texture(first_texture, aTexCoord).rgb;
      vec3 diffuse4 = light4.diffuse * (diff4 * material.diffuse) * texture(first_texture, aTexCoord).rgb;
      vec3 diffuseParallel = diffuse1 + diffuse2;
      vec3 diffuseSpot = diffuse3 * (attenuation3 * intensity3) + diffuse4 * (attenuation4 * intensity4);

      // specular
      vec3 viewDir = normalize(viewPos - aPos);
      vec3 reflectDir1 = reflect(-lightDir1, norm);
      vec3 reflectDir2 = reflect(-lightDir2, norm);
      vec3 reflectDir3 = reflect(-lightDir3, norm);
      vec3 reflectDir4 = reflect(-lightDir4, norm);
      float spec1 = pow(max(dot(viewDir, reflectDir1), 0.0), material.shininess);
      float spec2 = pow(max(dot(viewDir, reflectDir2), 0.0), material.shininess);
      float spec3 = pow(max(dot(viewDir, reflectDir3), 0.0), material.shininess);
      float spec4 = pow(max(dot(viewDir, reflectDir4), 0.0), material.shininess);
      vec3 specular1 = light1.specular * (spec1 * material.specular) * texture(second_texture, aTexCoord).rgb;
      vec3 specular2 = light2.specular * (spec2 * material.specular) * texture(second_texture, aTexCoord).rgb;
      vec3 specular3 = light3.specular * (spec3 * material.specular) * texture(second_texture, aTexCoord).rgb;
      vec3 specular4 = light4.specular * (spec4 * material.specular) * texture(second_texture, aTexCoord).rgb;
      vec3 specularParallel = specular1 + specular2;
      vec3 specularSpot = specular3 * (attenuation3 * intensity3) + specular4 * (attenuation4 * intensity4);

      vec3 ambient = ambientParallel + ambientSpot3 + ambientSpot4;
      vec3 diffuse = diffuseParallel + diffuseSpot;
      vec3 specular = specularParallel + specularSpot;

      vec3 result = ambient + diffuse + specular;
      // vec3 result = ambient;
      fragColor = vec4(result, 1.0);
}